require 'decimal'
require 'fileutils'

# Set base URL to environment
NEW_QA_ENV_URL        = "http://master.silverweb.ctshirts.qa"
BASE_QA_URL           = "http://192.168.1.47"
BASE_LIVE_AUTOMATION  = "http://192.168.212.27:121"
LIVE_TEST_URL         = "http://80.64.56.153"
BASE_LIVE_URL         = "http://www.ctshirts.co.uk"
BASE_URL = BASE_LIVE_URL

# Basket url link is needed by all pages
BASKET_IDENTIFIER         = "/Basket.aspx"
BASKET_LINK_URL           = BASE_URL + BASKET_IDENTIFIER

# Gives the ability to change timeouts for loading pages and page elements
PAGE_TIMEOUT_SECS         = 45    # default timeout value for loading a page
PAGE_ELEMENT_TIMEOUT_SECS = 30    # default timeout value for a given page element

# Enable logging to stdout. This gives information about what the test is actually doing
# (eg. giving contents of the basket before and after removing an item)
ENABLED_LOGGING                = TRUE

# To provide more detail, this will switch logging of individual items 'on' if TRUE, and 'off' if FALSE
# (eg. outputing the SKU's and names of shirts after sorting by price has been carried out on a product page)
INDIVIDUAL_ITEM_LOGGING_ENABLED = TRUE

# A switch that is used to redirect all calls to the Casual Shirts product page
# to use the All Shirts product page instead
# (ie. as there may just be a Casual shirts 'Department page' that does not list individual shirts)
NO_CASUAL_SHIRTS_PRODUCT_LISTING_PAGE = TRUE

############################################################################################################################
# Require and include the file that contains the EnvMethods module. This module contains methods used to create screen dumps
# and save test results to files in appropriately named subdirectories
############################################################################################################################
require "#{Dir.pwd}/features/lib/common_modules"
include EnvMethods

##############################################################################
### Select the browser you want to execute tests with watir-webdriver here ###
##############################################################################
SELECT_BROWSER = 'chrome'
p "dir is #{Dir.pwd}"

browser_name = ENV['browser'] || SELECT_BROWSER
if browser_name == 'chrome'
  require 'watir-webdriver'
  browser = Watir::Browser.new :chrome
elsif browser_name == 'firefox'
  require 'watir-webdriver'
  browser = Watir::Browser.new :firefox
elsif browser_name == 'ie'
  # use gem watir-classic for IE if needed
  require 'watir-webdriver'
  browser = Watir::Browser.new :ie
#  require 'watir-classic'
#  Watir::Browser.default = 'ie'
#  browser = Watir::Browser.new
end

Before do
  @browser = browser
  if browser_name == 'firefox' || browser_name == 'chrome'
    @browser.cookies.clear
  elsif browser_name == 'ie'
    # need a separate task to delete cookies when using 'ie'
  end
end

After do |scenario|
  if scenario.failed?
#    if browser_name == 'firefox' || browser_name == 'chrome'          ####### IE NOW WORKS in Watir-Webdriver ############
      # create directory to store screenshots if needed. Then store the screenshot (whose name is based on the scenario and timestamp) in the 'screenshots' directory
      Dir.mkdir("screenshots") unless File.directory?("screenshots")
      file_name_png = scenario_name(scenario) + '.png'
      @browser.driver.save_screenshot("screenshots/#{file_name_png}")
      # @browser.screenshot.save(file_name_png)      # can also use this to save a screenshot!

      # attach a screenshot to the results file defined in the cucumber profile (inside the cucumber.yml file)
      embed("screenshots/#{file_name_png}", 'image/png')

      # create 'results' directory if needed. Then copy the results file (whose name is based on the scenario and timestamp) to thia directory
      Dir.mkdir("results") unless File.directory?("results")
      file_name_html = scenario_name(scenario) + '.html'
      FileUtils.copy('results.html', "results/#{file_name_html}")
#    end
  end

  # Log out of the current user's account if they are already logged in
  if @browser.div(:id => 'account_nav_opts').link(:href => /LogOut/).exists?
    # Click the 'Logout' link
    @browser.div(:id => 'account_nav_opts').link(:href => /LogOut/).fire_event('onclick')
  elsif @browser.link(:href => /account_nav_opts/).exists?
    # Open the 'My Account' menu then click the 'Logout' link
    @browser.link(:href => /account_nav_opts/).fire_event('onclick')
    @browser.div(:id => 'account_nav_opts').link(:href => /LogOut/).when_present.fire_event('onclick')
  end
end

at_exit do
  browser.close
end